{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gr6wKGGtHHih","executionInfo":{"status":"ok","timestamp":1743143338541,"user_tz":-330,"elapsed":3425,"user":{"displayName":"Suchet Sanjeev patil","userId":"05008444672625123290"}},"outputId":"a9353c79-cd59-45ef-ea57-9ee28b6bb3c1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: pyarrow in /usr/local/lib/python3.11/dist-packages (18.1.0)\n","Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"]}],"source":["!pip install pandas pyarrow\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"kmar4ajvH6-z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743142371776,"user_tz":-330,"elapsed":23739,"user":{"displayName":"Suchet Sanjeev patil","userId":"05008444672625123290"}},"outputId":"be156b41-1752-4931-9317-67ed00c3dd0e"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# import pandas as pd\n","# import numpy as np\n","# import joblib\n","# import json\n","# from sklearn.model_selection import train_test_split\n","# from sklearn.preprocessing import StandardScaler\n","# from imblearn.over_sampling import SMOTE\n","# from sklearn.naive_bayes import GaussianNB\n","# from sklearn.metrics import accuracy_score, classification_report\n","\n","# # Load datasets\n","# df1 = pd.read_parquet('train0000.parquet')\n","# df2 = pd.read_parquet('train0001.parquet')\n","\n","# # Combine datasets\n","# df = pd.concat([df1, df2], ignore_index=True)\n","\n","# # Drop instruction column\n","# df = df.drop('instruction', axis=1)\n","\n","# # Convert 'output' column to binary labels\n","# df['output'] = df['output'].map({'Fraudulent': 1, 'not Fraudulent': 0})\n","\n","# # Parse JSON data from 'input' column\n","# def parse_json(data):\n","#     try:\n","#         return json.loads(data)\n","#     except:\n","#         return None\n","\n","# parsed_data = df['input'].apply(parse_json)\n","# df_parsed = pd.json_normalize(parsed_data)\n","# # Keep only numeric columns\n","# df_parsed = df_parsed.select_dtypes(include=[np.number])\n","# # Merge parsed features with labels\n","# df_final = pd.concat([df_parsed, df['output']], axis=1)\n","# # Drop rows with missing values\n","# df_final = df_final.dropna()\n","# # Splitting features and target\n","# X = df_final.drop('output', axis=1)\n","# y = df_final['output']\n","# # Apply SMOTE for balancing\n","# smote = SMOTE()\n","# X_resampled, y_resampled = smote.fit_resample(X, y)\n","# # Split data into training and testing sets\n","# X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n","# # Standardize the features (Naïve Bayes works well with standardized data)\n","# scaler = StandardScaler()\n","# X_train = scaler.fit_transform(X_train)\n","# X_test = scaler.transform(X_test)\n","# joblib.dump(scaler, 'scaler.pkl')\n","# # Train Naïve Bayes model\n","# nb_model = GaussianNB()\n","# nb_model.fit(X_train, y_train)\n","# # Make predictions\n","# y_pred = nb_model.predict(X_test)\n","# # Evaluate model performance\n","# accuracy = accuracy_score(y_test, y_pred)\n","# print(f'Naïve Bayes Test Accuracy: {accuracy * 100:.2f}%')\n","# print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n","# # Save the trained model\n","# joblib.dump(nb_model, 'naive_bayes_model.pkl')\n","\n","import pandas as pd\n","import numpy as np\n","import json\n","import joblib\n","from imblearn.over_sampling import SMOTE\n","from sklearn.naive_bayes import BernoulliNB\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, classification_report\n","\n","# Load training data\n","df_train = pd.read_parquet(\"train0000.parquet\")\n","\n","# Drop unnecessary columns\n","if 'instruction' in df_train.columns:\n","    df_train = df_train.drop('instruction', axis=1)\n","\n","# Convert 'output' column to binary labels\n","df_train['output'] = df_train['output'].map({'Fraudulent': 1, 'not Fraudulent': 0})\n","\n","# Parse JSON data from 'input' column\n","def parse_json(data):\n","    try:\n","        return json.loads(data)\n","    except:\n","        return None\n","\n","parsed_data = df_train['input'].apply(parse_json)\n","df_parsed = pd.json_normalize(parsed_data)\n","df_parsed = df_parsed.select_dtypes(include=[np.number])  # Keep only numeric columns\n","\n","# Merge parsed features with labels\n","df_final = pd.concat([df_parsed, df_train['output']], axis=1).dropna()\n","\n","# Separate features and target\n","X = df_final.drop('output', axis=1)\n","y = df_final['output']\n","\n","# Apply SMOTE for class balancing\n","smote = SMOTE(sampling_strategy=0.7, random_state=42)\n","X_resampled, y_resampled = smote.fit_resample(X, y)\n","\n","# Standardize features\n","scaler = MinMaxScaler()\n","X_resampled = scaler.fit_transform(X_resampled)\n","\n","# Split into train and validation sets\n","X_train, X_val, y_train, y_val = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n","\n","# Train Naïve Bayes model\n","nb_model = BernoulliNB()\n","nb_model.fit(X_train, y_train)\n","\n","# Validate the model\n","y_val_pred = nb_model.predict(X_val)\n","val_accuracy = accuracy_score(y_val, y_val_pred)\n","print(f\"Naïve Bayes Validation Accuracy: {val_accuracy * 100:.2f}%\")\n","print(\"Validation Classification Report:\\n\", classification_report(y_val, y_val_pred))\n","\n","# Save model and scaler\n","joblib.dump(nb_model, \"naive_bayes_model.pkl\")\n","joblib.dump(scaler, \"scaler.pkl\")\n","\n","print(\"Model and scaler saved successfully!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"opsOqkE2hB05","executionInfo":{"status":"ok","timestamp":1743144295831,"user_tz":-330,"elapsed":25042,"user":{"displayName":"Suchet Sanjeev patil","userId":"05008444672625123290"}},"outputId":"a5322f2e-05e2-487c-f9eb-80a50c6f594d"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Naïve Bayes Validation Accuracy: 85.13%\n","Validation Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.98      0.76      0.86    238261\n","           1       0.74      0.98      0.84    166842\n","\n","    accuracy                           0.85    405103\n","   macro avg       0.86      0.87      0.85    405103\n","weighted avg       0.88      0.85      0.85    405103\n","\n","Model and scaler saved successfully!\n"]}]},{"cell_type":"code","source":["# import pandas as pd\n","# import numpy as np\n","# import joblib\n","# import json\n","# from sklearn.preprocessing import StandardScaler\n","# from sklearn.metrics import accuracy_score, classification_report\n","\n","# # Load saved Naïve Bayes model and scaler\n","# nb_model = joblib.load('naive_bayes_model.pkl')\n","# scaler = joblib.load('scaler.pkl')\n","\n","# # Load both test datasets\n","# df_test1 = pd.read_parquet('test0000.parquet')\n","# df_test2 = pd.read_parquet('test0001.parquet')\n","\n","# # Combine test datasets\n","# df_test = pd.concat([df_test1, df_test2], ignore_index=True)\n","\n","# # Drop instruction column if present\n","# if 'instruction' in df_test.columns:\n","#     df_test = df_test.drop('instruction', axis=1)\n","\n","# # Convert 'output' column to binary labels (if available)\n","# if 'output' in df_test.columns:\n","#     df_test['output'] = df_test['output'].map({'Fraudulent': 1, 'not Fraudulent': 0})\n","\n","# # Parse JSON data from 'input' column\n","# def parse_json(data):\n","#     try:\n","#         return json.loads(data)\n","#     except:\n","#         return None\n","# parsed_data = df_test['input'].apply(parse_json)\n","# df_parsed = pd.json_normalize(parsed_data)\n","# # Keep only numeric columns\n","# df_parsed = df_parsed.select_dtypes(include=[np.number])\n","# # Merge parsed features with labels (if available)\n","# if 'output' in df_test.columns:\n","#     df_final = pd.concat([df_parsed, df_test['output']], axis=1)\n","# else:\n","#     df_final = df_parsed.copy()\n","# # Drop rows with missing values\n","# df_final = df_final.dropna()\n","# # Separate features and target (if available)\n","# if 'output' in df_final.columns:\n","#     X_test = df_final.drop('output', axis=1)\n","#     y_test = df_final['output']\n","# else:\n","#     X_test = df_final  # If testing on unlabeled data\n","# # Standardize test data\n","# X_test = scaler.transform(X_test)\n","# # Make predictions\n","# y_pred = nb_model.predict(X_test)\n","# # If test data has actual labels, evaluate performance\n","# if 'output' in df_final.columns:\n","#     accuracy = accuracy_score(y_test, y_pred)\n","#     print(f'Naïve Bayes Test Accuracy: {accuracy * 100:.2f}%')\n","#     print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n","# else:\n","#     print(\"Predictions on new test data:\", y_pred)\n","import pandas as pd\n","import numpy as np\n","import json\n","import joblib\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import accuracy_score, classification_report, precision_recall_curve\n","\n","# Load trained Naïve Bayes model and scaler\n","nb_model = joblib.load(\"naive_bayes_model.pkl\")\n","scaler = joblib.load(\"scaler.pkl\")\n","\n","# Load both test datasets\n","df_test1 = pd.read_parquet(\"test0000.parquet\")\n","df_test2 = pd.read_parquet(\"test0001.parquet\")\n","\n","# Combine test datasets\n","df_test = pd.concat([df_test1, df_test2], ignore_index=True)\n","\n","# Drop 'instruction' column if present\n","if 'instruction' in df_test.columns:\n","    df_test = df_test.drop('instruction', axis=1)\n","\n","# Convert 'output' column to binary labels\n","df_test['output'] = df_test['output'].map({'Fraudulent': 1, 'not Fraudulent': 0})\n","\n","# Parse JSON data from 'input' column\n","def parse_json(data):\n","    try:\n","        return json.loads(data)\n","    except:\n","        return None\n","\n","parsed_data = df_test['input'].apply(parse_json)\n","df_parsed = pd.json_normalize(parsed_data)\n","df_parsed = df_parsed.select_dtypes(include=[np.number])\n","\n","# Merge parsed features with labels\n","df_final = pd.concat([df_parsed, df_test['output']], axis=1).dropna()\n","\n","# Separate features and target\n","X_test = df_final.drop('output', axis=1)\n","y_test = df_final['output']\n","\n","# Standardize test data using the same scaler from training\n","X_test = scaler.transform(X_test)\n","\n","# Make predictions\n","y_pred = nb_model.predict(X_test)\n","\n","# Evaluate the model\n","test_accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Naïve Bayes Test Accuracy: {test_accuracy * 100:.2f}%\")\n","print(\"Test Classification Report:\\n\", classification_report(y_test, y_pred))\n","\n","# Plot Precision-Recall curve\n","precision, recall, _ = precision_recall_curve(y_test, y_pred)\n","plt.plot(recall, precision, marker=\".\")\n","plt.xlabel(\"Recall\")\n","plt.ylabel(\"Precision\")\n","plt.title(\"Precision-Recall Curve for Naïve Bayes\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":672},"id":"0yQVJtfvhB7u","executionInfo":{"status":"ok","timestamp":1743144348449,"user_tz":-330,"elapsed":28914,"user":{"displayName":"Suchet Sanjeev patil","userId":"05008444672625123290"}},"outputId":"8617c44a-ec65-463e-cc94-d58238411024"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Naïve Bayes Test Accuracy: 76.24%\n","Test Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      0.76      0.86   1588556\n","           1       0.01      0.97      0.01      2099\n","\n","    accuracy                           0.76   1590655\n","   macro avg       0.50      0.87      0.44   1590655\n","weighted avg       1.00      0.76      0.86   1590655\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}